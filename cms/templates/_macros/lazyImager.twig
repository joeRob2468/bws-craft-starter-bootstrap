{# @var craft \craft\web\twig\variables\CraftVariable #}
{# 

// lazyLoaded Image/bgImages, optimized with Imager and Focuspoint
---------------------------------------------------------------------------
https://nystudio107.com/blog/creating-optimized-images-in-craft-cms
https://github.com/aelvan/Imager-Craft
https://github.com/smcyr/Craft-FocusPoint
for the bgImage intrinsic ratio classname creation check:
https://github.com/inuitcss/inuitcss/blob/develop/objects/_objects.ratio.scss

1. import marco in your template:
{% import '_macros/_lazyImager' as LazyImager %}

2. set image to run through macro e.g.:
{% set image = block.image.first() %}

3. set options in template, or pass without options for defaults:
{% set options = {
    sizes: [                        --> set responsive image widths created by imager for lazySizes. You can set the height as well. 
        { width: 2200 },            --> defaults based on http://gs.statcounter.com/screen-resolution-stats
        { width: 1920 },
        { width: 1366 },
        { width: 768 },
        { width: 360 },
    ],
    allowUpscale: true,             --> allow images to upscale - default is false, which will prevent upscaling
    alt: 'logo',                    --> set image alt tag - default is false
    class: 'o-media',               --> class name of img/bg element - default is o-media
    format: 'jpg',                  --> forces output format to a specific type - default is jpg
    interlace: true,                --> set imager setting interlace - default is true
    mode: 'crop',                   --> set resize mode to 'crop', 'fit', 'stretch', 'croponly', 'letterbox' - default is crop
    openDiv: false,                 --> won't close the bgImage div element, useful for sliders or if the bgImage contains other elements - default is false
    quality: 80,                    --> set image quality - default is 80
    ratio: 16:9,                    --> set image ratio for cropping - default is false
    lazy: true,                     --> use lazySizes - default is true 
    wrapImage: true                 --> wrap image in container div
    wrapClass: 'image-container'    --> class to use for container div - defaults to 'image-container'
    cover: flse                     --> add the 'cover' class to the image for object-fit: cover support - defaults to false
} %}

4. execute macro in template:
{{ LazyImager.LazyImager(image, options) }} 
#}

{# Macro #}
{% macro LazyImager(image,options) %}

    {# Set Defaults #}
    {% set defaults = {
        sizes: [  
            { width: 2200 },
            { width: 1920 },
            { width: 1366 },
            { width: 768 },
            { width: 360 },
        ],
        allowUpscale: true,
        alt: '',
        class: 'o-media',
        transparent: false,
        format: 'jpg',
        interlace: true,
        lazy: true,
        mode: 'crop',
        quality: 80,
        ratio: false, 
        wrapImage: true,
        wrapClass: 'image-container',
        cover: false,
    } %}

    {# Merge Attr with Defaults #}
    {% set options = options ? defaults|merge(options) : defaults %}

    {% if image %}

        {# Set Ratio #}
        {% if options.ratio %}
            {% set ratio = options.ratio|split(':') %}
            {% set base64Ratio = options.ratio|split(':') %}
            {% set ratio = ratio|first/ratio|last %}
        {% else %}
            {% set imageSize = image.width ~ ':' ~ image.height %}
            {% set base64Ratio = imageSize|split(':') %}
            {% set ratio = '' %}
        {% endif %}

        {# Define global variables #}
        {% set imageSettings = {
        allowUpscale: options.allowUpscale,
        format: options.format,
        interlace: options.interlace,
        jpegQuality: options.quality,
        mode: options.mode,
        ratio: ratio,
        } %}

        {# Image #}
        {% set images = craft.imager.transformImage(image, options.sizes, imageSettings) %}

        {% if options.wrapImage %}<div class="{{ options.wrapClass }}{% if not options.cover %} no-cover{% endif %}{% if options.transparent %} is-transparent{% endif %}">{% endif %}
            <img data-sizes="auto"
                src="{{ craft.imager.base64Pixel(base64Ratio|first, base64Ratio|last) }}"
                data-srcset="{{ craft.imager.srcset(images) }}"
                class="{{ options.class }} {% if options.cover %}cover{% endif %} {% if options.lazy %}lazyload{% endif %}"
                alt="{{ options.alt }}"
                {% if options.cover %}data-object-fit{% endif %} />
        {% if options.wrapImage %}</div>{% endif %}
    {% endif %}
{% endmacro %}