{"version":3,"file":"formie-form.bundle.js","sources":["webpack:///./cms/vendor/verbb/formie/src/web/assets/frontend/src/js/formie-form-base.js","webpack:///./cms/vendor/verbb/formie/src/web/assets/frontend/src/js/formie-form-theme.js","webpack:///./cms/vendor/verbb/formie/src/web/assets/frontend/src/js/formie-lib.js","webpack:///./cms/vendor/verbb/formie/src/web/assets/frontend/src/js/utils/bouncer.js","webpack:///./cms/vendor/verbb/formie/src/web/assets/frontend/src/js/utils/globals.js","webpack:///./cms/vendor/verbb/formie/src/web/assets/frontend/src/js/utils/utils.js","webpack:///./node_modules/formdata-polyfill/formdata.min.js","webpack:///./src/js/block-modules/FormieForm.js"],"sourcesContent":["const globals = require('./utils/globals');\n\nimport { FormieFormTheme } from './formie-form-theme';\n\nexport class FormieFormBase {\n    constructor(config = {}) {\n        this.formId = `#${config.formHashId}`;\n        this.$form = document.querySelector(this.formId);\n        this.config = config;\n        this.settings = config.settings;\n        this.listeners = {};\n\n        if (!this.$form) {\n            return;\n        }\n\n        this.$form.form = this;\n\n        if (this.settings.outputJsTheme) {\n            this.formTheme = new FormieFormTheme(this.config);\n        }\n\n        // Add helper classes to fields when their inputs are focused, have values etc.\n        this.registerFieldEvents(this.$form);\n\n        // Hijack the form's submit handler, in case we need to do something\n        this.addEventListener(this.$form, 'submit', (e) => {\n            e.preventDefault();\n\n            const beforeSubmitEvent = new CustomEvent('onBeforeFormieSubmit', {\n                bubbles: true,\n                cancelable: true,\n                detail: {\n                    submitHandler: this,\n                },\n            });\n\n            if (!this.$form.dispatchEvent(beforeSubmitEvent)) {\n                return;\n            }\n\n            // Add a little delay for UX\n            setTimeout(() => {\n                const validateEvent = new CustomEvent('onFormieValidate', {\n                    bubbles: true,\n                    cancelable: true,\n                    detail: {\n                        submitHandler: this,\n                    },\n                });\n\n                if (!this.$form.dispatchEvent(validateEvent)) {\n                    return;\n                }\n\n                this.submitForm();\n            }, 300);\n        }, false);\n    }\n\n    submitForm() {\n        // Check if we're going back, and attach an input to tell formie not to validate\n        if (this.$form.goBack) {\n            const $backButtonInput = document.createElement('input');\n            $backButtonInput.setAttribute('type', 'hidden');\n            $backButtonInput.setAttribute('name', 'goingBack');\n            $backButtonInput.setAttribute('value', 'true');\n            this.$form.appendChild($backButtonInput);\n        }\n\n        const submitEvent = new CustomEvent('onFormieSubmit', {\n            bubbles: true,\n            cancelable: true,\n            detail: {\n                submitHandler: this,\n            },\n        });\n\n        if (!this.$form.dispatchEvent(submitEvent)) {\n            return;\n        }\n\n        if (this.settings.submitMethod === 'ajax') {\n            this.formAfterSubmit();\n        } else {\n            this.$form.submit();\n        }\n    }\n\n    formAfterSubmit(data = {}) {\n        this.$form.dispatchEvent(new CustomEvent('onAfterFormieSubmit', {\n            bubbles: true,\n            detail: data,\n        }));\n    }\n\n    formSubmitError(data = {}) {\n        this.$form.dispatchEvent(new CustomEvent('onFormieSubmitError', {\n            bubbles: true,\n            detail: data,\n        }));\n    }\n\n    registerFieldEvents($element) {\n        const $wrappers = $element.querySelectorAll('.fui-field');\n\n        $wrappers.forEach($wrapper => {\n            const $input = $wrapper.querySelector('.fui-input, .fui-select');\n\n            if ($input) {\n                this.addEventListener($input, 'input', event => {\n                    $wrapper.dispatchEvent(new CustomEvent('input', {\n                        bubbles: false,\n                        detail: {\n                            input: event.target,\n                        },\n                    }));\n                });\n\n                this.addEventListener($input, 'focus', event => {\n                    $wrapper.dispatchEvent(new CustomEvent('focus', {\n                        bubbles: false,\n                        detail: {\n                            input: event.target,\n                        },\n                    }));\n                });\n\n                this.addEventListener($input, 'blur', event => {\n                    $wrapper.dispatchEvent(new CustomEvent('blur', {\n                        bubbles: false,\n                        detail: {\n                            input: event.target,\n                        },\n                    }));\n                });\n\n                $wrapper.dispatchEvent(new CustomEvent('init', {\n                    bubbles: false,\n                    detail: {\n                        input: $input,\n                    },\n                }));\n            }\n        });\n    }\n\n    addEventListener(element, event, func) {\n        this.listeners[event] = { element, func };\n\n        element.addEventListener(event.split('.')[0], this.listeners[event].func);\n    }\n\n    removeEventListener(event) {\n        let eventInfo = this.listeners[event] || {};\n\n        if (eventInfo && eventInfo.element && eventInfo.func) {\n            eventInfo.element.removeEventListener(event.split('.')[0], eventInfo.func);\n            delete this.listeners[event];\n        }\n    }\n}\n","import { Bouncer } from './utils/bouncer';\n\nexport class FormieFormTheme {\n    constructor(config = {}) {\n        this.formId = `#${config.formHashId}`;\n        this.$form = document.querySelector(this.formId);\n        this.config = config;\n        this.settings = config.settings;\n        this.validationOnSubmit = !!this.settings.validationOnSubmit;\n        this.validationOnFocus = !!this.settings.validationOnFocus;\n\n        this.setCurrentPage(this.settings.currentPageId);\n\n        if (!this.$form) {\n            return;\n        }\n        \n        this.$form.formTheme = this;\n        this.form = this.$form.form;\n\n        this.initValidator();\n\n        // Check if this is a success page and if we need to hide the notice\n        // This is for non-ajax forms, where the page has reloaded\n        this.hideSuccess();\n\n        // Hijack the form's submit handler, in case we need to do something\n        this.addSubmitEventListener();\n\n        // Save the form's current state so we can tell if its changed later on\n        this.savedFormHash = this.hashForm();\n\n        // Listen to form changes if the user tries to reload\n        if (this.settings.enableUnloadWarning) {\n            this.addFormUnloadEventListener();\n        }\n    }\n\n    initValidator() {\n        // Kick off validation - use this even if disabling client-side validation\n        // so we can use a nice API handle server-side errprs\n        var validatorSettings = {\n            fieldClass: 'fui-error',\n            errorClass: 'fui-error-message',\n            fieldPrefix: 'fui-field-',\n            errorPrefix: 'fui-error-',\n            messageAfterField: true,\n            messageCustom: 'data-fui-message',\n            messageTarget: 'data-fui-target',\n            validateOnBlur: this.validationOnFocus,\n\n            // Call validation on-demand\n            validateOnSubmit: false,\n            disableSubmit: false,\n\n            customValidations: {},\n\n            messages: {\n                missingValue: {\n                    checkbox: t('This field is required.'),\n                    radio: t('Please select a value.'),\n                    select: t('Please select a value.'),\n                    'select-multiple': t('Please select at least one value.'),\n                    default: t('Please fill out this field.'),\n                },\n\n                patternMismatch: {\n                    email: t('Please enter a valid email address.'),\n                    url: t('Please enter a URL.'),\n                    number: t('Please enter a number'),\n                    color: t('Please match the following format: #rrggbb'),\n                    date: t('Please use the YYYY-MM-DD format'),\n                    time: t('Please use the 24-hour time format. Ex. 23:00'),\n                    month: t('Please use the YYYY-MM format'),\n                    default: t('Please match the requested format.'),\n                },\n\n                outOfRange: {\n                    over: t('Please select a value that is no more than {max}.'),\n                    under: t('Please select a value that is no less than {min}.'),\n                },\n\n                wrongLength: {\n                    over: t('Please shorten this text to no more than {maxLength} characters. You are currently using {length} characters.'),\n                    under: t('Please lengthen this text to {minLength} characters or more. You are currently using {length} characters.'),\n                },\n\n                fallback: t('There was an error with this field.'),\n            },\n        };\n\n        // Allow other modules to modify our validator settings (for custom rules and messages)\n        const registerFormieValidation = new CustomEvent('registerFormieValidation', {\n            bubbles: true,\n            detail: {\n                validatorSettings,\n            },\n        });\n\n        // Give a small amount of time for other JS scripts to register validations. These are lazy-loaded.\n        // Maybe re-think this so we don't have to deal with event listener registration before/after dispatch?\n        setTimeout(() => {\n            this.$form.dispatchEvent(registerFormieValidation);\n\n            this.validator = new Bouncer(this.formId, registerFormieValidation.detail.validatorSettings);\n        }, 500);\n\n        // After we clear any error, validate the fielset again. Mostly so we can remove global errors\n        this.form.addEventListener(this.$form, 'bouncerRemoveError', (e) => {\n            this.validate(false);\n        });\n\n        // Override error messages defined in DOM - Bouncer only uses these as a last resort\n        // In future updates, we can probably remove this\n        this.form.addEventListener(this.$form, 'bouncerShowError', (e) => {\n            var $field = e.target;\n            var $fieldContainer = $field.closest('.fui-field');\n            var message = $field.getAttribute('data-fui-message');\n\n            // If there's a server error, it takes priority.\n            if (e.detail && e.detail.errors && e.detail.errors.serverMessage) {\n                message = e.detail.errors.serverMessage;\n            }\n\n            // Check if we need to move the error out of the .fui-input-container node.\n            // Only the input itself should be in here.\n            var $errorToMove = $field.parentNode.querySelector('.fui-error-message');\n\n            if ($errorToMove && $errorToMove.parentNode.parentNode) {\n                $errorToMove.parentNode.parentNode.appendChild($errorToMove);\n            }\n\n            // The error has been moved, find it again\n            if ($fieldContainer) {\n                var $error = $fieldContainer.querySelector('.fui-error-message');\n\n                if ($error && message) {\n                    $error.textContent = message;\n                }\n            }\n        }, false);\n    }\n\n    addSubmitEventListener() {\n        var $submitBtns = this.$form.querySelectorAll('[type=\"submit\"]');\n\n        // Forms can have multiple submit buttons, and its easier to assign the currently clicked one\n        // than tracking it through the submit handler.\n        $submitBtns.forEach(($submitBtn) => {\n            this.form.addEventListener($submitBtn, 'click', (e) => {\n                this.$submitBtn = e.target;\n\n                // Store for later if we're using text spinner\n                this.originalButtonText = e.target.textContent.trim();\n            });\n        });\n\n        this.form.addEventListener(this.$form, 'onBeforeFormieSubmit', this.onBeforeSubmit.bind(this));\n        this.form.addEventListener(this.$form, 'onFormieValidate', this.onValidate.bind(this));\n        this.form.addEventListener(this.$form, 'onFormieSubmit', this.onSubmit.bind(this));\n        this.form.addEventListener(this.$form, 'onFormieSubmitError', this.onSubmitError.bind(this));\n    }\n\n    onBeforeSubmit(e) {\n        this.beforeSubmit();\n\n        // Save for later to trigger real submit\n        this.submitHandler = e.detail.submitHandler;\n    }\n\n    onValidate(e) {\n        // Bypass validation and custom event handling if going back\n        if (!this.$form.goBack && !this.validate()) {\n            this.onFormError();\n\n            // Set a flag on the event, so other listeners can potentially do something\n            e.detail.invalid = true;\n\n            e.preventDefault();\n        }\n    }\n\n    onSubmit(e) {\n        // Stop base behaviour of just submitting the form\n        e.preventDefault();\n\n        // Check if the submit button has a `name` attribute. If so, we need to append a hidden input\n        // to the form, as JS-submitted forms won't pass on the submit button value as its programatically submitted.\n        if (this.$submitBtn && this.$submitBtn.getAttribute('name')) {\n            const name = this.$submitBtn.getAttribute('name');\n            const value = this.$submitBtn.getAttribute('value');\n\n            // Add a hidden input, if it doesn't exist\n            this.updateOrCreateHiddenInput(name, value);\n        }\n\n        // Either staight submit, or use Ajax\n        if (this.settings.submitMethod === 'ajax') {\n            this.ajaxSubmit();\n        } else {\n            // Before a server-side submit, refresh the saved hash immediately. Otherwise, the native submit\n            // handler - which technically unloads the page - will trigger the changed alert.\n            this.savedFormHash = this.hashForm();\n\n            this.$form.submit();\n        }\n    }\n\n    onSubmitError(e) {\n        this.onFormError();\n    }\n\n    addFormUnloadEventListener() {\n        this.form.addEventListener(window, 'beforeunload', (e) => {\n            if (this.savedFormHash !== this.hashForm()) {\n                e.returnValue = t('Are you sure you want to leave?');\n            }\n        });\n    }\n\n    hashForm() {\n        var hash = {};\n\n        var formData = new FormData(this.$form);\n        var excludedItems = ['g-recaptcha-response', 'CRAFT_CSRF_TOKEN', '__JSCHK'];\n\n        for (var pair of formData.entries()) {\n            var isExcluded = excludedItems.filter(item => pair[0].startsWith(item));\n\n            if (!isExcluded.length) {\n                // eslint-disable-next-line\n                hash[pair[0]] = pair[1];\n            }\n        }\n\n        return JSON.stringify(hash);\n    }\n\n    validate(focus = true) {\n        if (!this.validationOnSubmit) {\n            return true;\n        }\n\n        var $fieldset = this.$form;\n\n        if (this.$currentPage) {\n            $fieldset = this.$currentPage;\n        }\n\n        var invalidFields = this.validator.validateAll($fieldset);\n\n        // If there are errors, focus on the first one\n        if (invalidFields.length > 0 && focus) {\n            invalidFields[0].focus();\n        }\n\n        // Remove any global errors if none - just in case\n        if (invalidFields.length === 0) {\n            this.removeFormAlert();\n        }\n\n        return !invalidFields.length;\n    }\n\n    hideSuccess() {\n        var $successMessage = this.$form.parentNode.querySelector('.fui-alert-success');\n\n        if ($successMessage && this.settings.submitActionMessageTimeout) {\n            var timeout = parseInt(this.settings.submitActionMessageTimeout, 10) * 1000;\n\n            setTimeout(() => {\n                $successMessage.remove();\n            }, timeout);\n        }\n    }\n\n    addLoading() {\n        if (this.$submitBtn) {\n            // Always disable the button\n            this.$submitBtn.setAttribute('disabled', true);\n\n            if (this.settings.loadingIndicator === 'spinner') {\n                this.$submitBtn.classList.add('fui-loading');\n            }\n\n            if (this.settings.loadingIndicator === 'text') {\n                this.$submitBtn.textContent = this.settings.loadingIndicatorText;\n            }\n        }\n    }\n\n    removeLoading() {\n        if (this.$submitBtn) {\n            // Always enable the button\n            this.$submitBtn.removeAttribute('disabled');\n\n            if (this.settings.loadingIndicator === 'spinner') {\n                this.$submitBtn.classList.remove('fui-loading');\n            }\n\n            if (this.settings.loadingIndicator === 'text') {\n                this.$submitBtn.textContent = this.originalButtonText;\n            }\n        }\n    }\n\n    onFormError(errorMessage) {\n        if (errorMessage) {\n            this.showFormAlert(errorMessage, 'error');\n        } else {\n            this.showFormAlert(this.settings.errorMessage, 'error');\n        }\n\n        this.removeLoading();\n    }\n\n    showFormAlert(text, type) {\n        var $alert = this.$form.parentNode.querySelector('.fui-alert');\n\n        // Strip <p> tags\n        text = text.replace(/<p[^>]*>/g, '').replace(/<\\/p>/g, '');\n\n        if ($alert) {\n            // We have to cater for HTML entities - quick-n-dirty\n            if ($alert.innerHTML !== this.decodeHtml(text)) {\n                $alert.innerHTML = $alert.innerHTML + '<br>' + text;\n            }\n        } else {\n            $alert = document.createElement('div');\n            $alert.className = 'fui-alert fui-alert-' + type;\n            $alert.setAttribute('role' , 'alert');\n            $alert.innerHTML = text;\n\n            // For error notices, we have potential special handling on position\n            if (type == 'error') {\n                $alert.className += ' fui-alert-' + this.settings.errorMessagePosition;\n\n                if (this.settings.errorMessagePosition == 'bottom-form') {\n                    this.$submitBtn.parentNode.parentNode.insertBefore($alert, this.$submitBtn.parentNode);\n                } else {\n                    this.$form.parentNode.insertBefore($alert, this.$form);\n                }\n            } else {\n                $alert.className += ' fui-alert-' + this.settings.submitActionMessagePosition;\n                \n                if (this.settings.submitActionMessagePosition == 'bottom-form') {\n                    // An even further special case when hiding the form!\n                    if (this.settings.submitActionFormHide) {\n                        this.$form.parentNode.insertBefore($alert, this.$form);\n                    } else {\n                        this.$submitBtn.parentNode.parentNode.insertBefore($alert, this.$submitBtn.parentNode);\n                    }\n                } else {\n                    this.$form.parentNode.insertBefore($alert, this.$form);\n                }\n            }\n        }\n    }\n\n    decodeHtml(html) {\n        var txt = document.createElement('textarea');\n        txt.innerHTML = html;\n        return txt.value;\n    }\n\n    removeFormAlert() {\n        var $alert = this.$form.parentNode.querySelector('.fui-alert');\n\n        if ($alert) {\n            $alert.remove();\n        }\n    }\n\n    removeBackInput() {\n        // Remove the hidden back input sent in any previous step\n        var $backButtonInput = this.$form.querySelector('[name=\"goingBack\"][type=\"hidden\"]');\n\n        if ($backButtonInput) {\n            $backButtonInput.remove();\n        }\n\n        // Reset the chosen page\n        this.$form.goBack = null;\n    }\n\n    beforeSubmit() {\n        // Remove all validation errors\n        Array.prototype.filter.call(this.$form.querySelectorAll('input, select, textarea'), (($field) => {\n            this.validator.removeError($field);\n        }));\n\n        this.removeFormAlert();\n        this.addLoading();\n    }\n\n    ajaxSubmit() {\n        const formData = new FormData(this.$form);\n        const method = this.$form.getAttribute('method');\n        const action = this.$form.getAttribute('action');\n\n        const xhr = new XMLHttpRequest();\n        xhr.open(method ? method : 'POST', action ? action : window.location.href, true);\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        xhr.setRequestHeader('Accept', 'application/json');\n        xhr.setRequestHeader('Cache-Control', 'no-cache');\n        xhr.timeout = (this.settings.ajaxTimeout || 10) * 1000;\n\n        this.beforeSubmit();\n\n        xhr.ontimeout = () => {\n            this.onAjaxError(t('The request timed out.'));\n        };\n\n        xhr.onerror = (e) => {\n            this.onAjaxError(t('The request encountered a network error. Please try again.'));\n        };\n\n        xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                try {\n                    const response = JSON.parse(xhr.responseText);\n\n                    if (response.errors) {\n                        this.onAjaxError(response.errors, response.errorMessage);\n                    } else {\n                        this.onAjaxSuccess(response);\n                    }\n                } catch(e) {\n                    this.onAjaxError(t('Unable to parse response `{e}`.', { e }));\n                }\n            } else {\n                this.onAjaxError(xhr.status + ': ' + xhr.statusText);\n            }\n        };\n\n        xhr.send(formData);\n    }\n\n    afterAjaxSubmit(response) {\n        // This will be called regardless of success or error\n        this.removeBackInput();\n\n        this.updateSubmissionInput(response);\n    }\n\n    onAjaxError(response, errorMessage = '') {\n        this.onFormError(errorMessage);\n\n        // Fire a fail event\n        this.submitHandler.formSubmitError();\n\n        this.afterAjaxSubmit(response);\n\n        if (typeof response === 'string') {\n            this.showFormAlert(response, 'error');\n        }\n\n        if (typeof response === 'object') {\n            Object.keys(response).forEach((handle, index) => {\n                const [ error ] = response[handle];\n                const $field = document.querySelector(`[name=\"fields[${handle}]\"]`);\n\n                if ($field) {\n                    this.validator.showError($field, { serverMessage: error });\n\n                    // Focus on the first error\n                    if (index === 0) {\n                        $field.focus();\n                    }\n                }\n            });\n        }\n    }\n\n    onAjaxSuccess(data) {\n        // Fire the event, because we've overridden the handler\n        this.submitHandler.formAfterSubmit(data);\n\n        this.afterAjaxSubmit(data);\n\n        // Reset the form hash, as all has been saved\n        this.savedFormHash = this.hashForm();\n\n        // Check if we need to proceed to the next page\n        if (data.nextPageId) {\n            this.removeLoading();\n\n            this.togglePage(data);\n\n            return;\n        }\n\n        // If we're redirecting away, do it immediately for nicer UX\n        if (data.redirectUrl) {\n            if (this.settings.submitActionTab === 'new-tab') {\n                window.open(data.redirectUrl, '_blank');\n            }\n\n            window.location.href = data.redirectUrl;\n\n            return;\n        }\n\n        // Delay this a little, in case we're redirecting away - better UX to just keep it loading\n        this.removeLoading();\n\n        // Remove the back button - not great UX to go back to a finished form\n        // Remember, its the button and the hidden input\n        var $backButtonInputs = this.$form.querySelectorAll('[name=\"goingBack\"]');\n\n        $backButtonInputs.forEach($backButtonInput => {\n            $backButtonInput.remove();\n        });\n\n        // Also remove the submit button for a multi-page form. Its bad UX to show you can\n        // submit a multi-page form again, at the end. In fact, we'll probably get errors -\n        // but this is totally fine for a single-page ajax form.\n        if (data.totalPages > 1) {\n            if (this.$submitBtn) {\n                this.$submitBtn.remove();\n            }\n        }\n\n        if (this.settings.submitAction === 'message') {\n            this.showFormAlert(data.submitActionMessage, 'success');\n\n            // Check if we need to remove the success message\n            this.hideSuccess();\n\n            if (this.settings.submitActionFormHide) {\n                this.$form.style.display = 'none';\n            }\n        }\n\n        // Reset values regardless, for the moment\n        this.$form.reset();\n\n        // Reset the form hash, as all has been saved\n        this.savedFormHash = this.hashForm();\n    }\n\n    updateSubmissionInput(data) {\n        if (!data.submissionId || !data.nextPageId) {\n            return;\n        }\n\n        // Add the hidden submission input, if it doesn't exist\n        this.updateOrCreateHiddenInput('submissionId', data.submissionId);\n    }\n\n    updateOrCreateHiddenInput(name, value) {\n        var $input = this.$form.querySelector('[name=\"' + name + '\"][type=\"hidden\"]');\n\n        if (!$input) {\n            $input = document.createElement('input');\n            $input.setAttribute('type', 'hidden');\n            $input.setAttribute('name', name);\n            this.$form.appendChild($input);\n        }\n\n        $input.setAttribute('value', value);\n    }\n\n    togglePage(data) {\n        // Hide all pages\n        var $allPages = this.$form.querySelectorAll('.fui-page');\n\n        $allPages.forEach($page => {\n            // Show the current page\n            if ($page.id === `${this.getPageId(data.nextPageId)}`) {\n                $page.classList.remove('fui-hidden');\n            } else {\n                $page.classList.add('fui-hidden');\n            }\n        });\n\n        // Update tabs and progress bar if we're using them\n        var $progress = this.$form.querySelector('.fui-progress-bar');\n\n        if ($progress) {\n            var pageIndex = data.nextPageIndex + 1;\n            var progress = Math.round((pageIndex / data.totalPages) * 100);\n\n            $progress.style.width = progress + '%';\n            $progress.setAttribute('aria-valuenow', progress);\n            $progress.textContent = progress + '%';\n        }\n\n        var $tabs = this.$form.querySelectorAll('.fui-tab');\n\n        $tabs.forEach($tab => {\n            // Show the current page\n            if ($tab.id === 'fui-tab-' + data.nextPageId) {\n                $tab.classList.add('fui-tab-active');\n            } else {\n                $tab.classList.remove('fui-tab-active');\n            }\n        });\n\n        // Update the current page\n        this.setCurrentPage(data.nextPageId);\n\n        // Smooth-scroll to the top of the form.\n        window.scrollTo({\n            top: this.$form.getBoundingClientRect().top + window.pageYOffset - 50,\n            behavior: 'smooth',\n        });\n    }\n\n    setCurrentPage(pageId) {\n        this.currentPageId = `#${this.getPageId(pageId)}`;\n        this.$currentPage = document.querySelector(this.currentPageId);\n    }\n\n    getPageId(pageId) {\n        return `${this.config.formHashId}-p-${pageId}`;\n    }\n}\n","const globals = require('./utils/globals');\nimport { isEmpty } from './utils/utils';\n\nimport { FormieFormBase } from './formie-form-base';\n\nexport class Formie {\n    constructor() {\n        this.forms = [];\n    }\n\n    initForms() {\n        // TODO: Change this to not be an ID for greater flexibility at the next breakpoint\n        this.$forms = document.querySelectorAll('form[id^=\"formie-form-\"]') || [];\n\n        // We use this in the CP, where it's a bit tricky to add a form ID. So check just in case.\n        // Might also be handy for front-end too!\n        if (!this.$forms.length) {\n            this.$forms = document.querySelectorAll('div[id^=\"formie-form-\"]') || [];\n        }\n\n        this.$forms.forEach($form => {\n            this.initForm($form);\n        });\n\n        // Emit a custom event to let scripts know the Formie class is ready\n        document.dispatchEvent(new CustomEvent('onFormieInit', {\n            bubbles: true,\n            detail: {\n                formie: this,\n            },\n        }));\n    }\n\n    initForm($form, formConfig = {}) {\n        if (isEmpty(formConfig)) {\n            // Initialize the form class with the `data-config` param on the form\n            formConfig = JSON.parse($form.getAttribute('data-config'));\n        }\n\n        if (isEmpty(formConfig)) {\n            console.error('Unable to parse `data-config` form attribute for config. Ensure this attribute exists on your form and contains valid JSON.');\n\n            return;\n        }\n\n        // See if we need to init additional, conditional JS (field, captchas, etc)\n        var registeredJs = formConfig.registeredJs || [];\n\n        // Add an instance to this factory to the form config\n        formConfig.Formie = this;\n\n        // Create the form class, save it to our collection\n        var form = new FormieFormBase(formConfig);\n\n        this.forms.push(form);\n\n        // Find all `data-field-config` attributes for the current page and form\n        // and build an object of them to initialize when loaded.\n        form.fieldConfigs = this.parseFieldConfig($form, $form);\n\n        // Is there any additional JS config registered for this form?\n        if (registeredJs.length) {\n            // Create a container to add these items to, so we can destroy them later\n            form.$registeredJs = document.createElement('div');\n            form.$registeredJs.setAttribute('data-fui-scripts', formConfig.formId);\n            document.body.appendChild(form.$registeredJs);\n\n            // Create a `<script>` for each registered JS\n            registeredJs.forEach((config) => {\n                var $script = document.createElement('script');\n\n                // Check if we've provided an external script to load. Ensure they're deferred so they don't block\n                // and use the onload call to trigger any actual scripts once its been loaded.\n                if (config.src) {\n                    $script.src = config.src;\n                    $script.defer = true;\n\n                    // Initialize all matching fields - their config is already rendered in templates\n                    $script.onload = () => {\n                        if (config.module) {\n                            var fieldConfigs = form.fieldConfigs[config.module];\n\n                            // Handle multiple fields on a page, creating a new JS class instance for each\n                            if (fieldConfigs && Array.isArray(fieldConfigs) && fieldConfigs.length) {\n                                fieldConfigs.forEach(fieldConfig => {\n                                    this.initJsClass(config.module, fieldConfig);\n                                });\n                            }\n\n                            // Handle captchas that have global settings, instead of per-field\n                            if (config.settings) {\n                                this.initJsClass(config.module, config.settings);\n                            }\n\n                            // Special handling for some JS modules\n                            if (config.module === 'FormieConditions') {\n                                this.initJsClass(config.module, { $form });\n                            }\n                        }\n                    };\n                }\n\n                form.$registeredJs.appendChild($script);\n            });\n        }\n    }\n\n    initJsClass(className, params) {\n        var moduleClass = window[className];\n\n        if (moduleClass) {\n            new moduleClass(params);\n        }\n    }\n\n    // Note the use of $form and $element to habdle Repeater\n    parseFieldConfig($element, $form) {\n        var config = {};\n\n        $element.querySelectorAll('[data-field-config]').forEach(($field) => {\n            var fieldConfig = JSON.parse($field.getAttribute('data-field-config'));\n\n            // Some fields supply multiple modules, so normalise for ease-of-processing\n            if (!Array.isArray(fieldConfig)) {\n                fieldConfig = [fieldConfig];\n            }\n\n            fieldConfig.forEach((nestedFieldConfig) => {\n                if (!config[nestedFieldConfig.module]) {\n                    config[nestedFieldConfig.module] = [];\n                }\n\n                // Provide field classes with the data they need\n                config[nestedFieldConfig.module].push({\n                    $form,\n                    $field,\n                    ...nestedFieldConfig,\n                });\n\n            });\n        });\n\n        return config;\n    }\n\n    getForm($form) {\n        return this.forms.find((form) => {\n            return form.$form == $form;\n        });\n    }\n\n    getFormById(id) {\n        return this.forms.find((form) => {\n            if (form.config) {\n                return form.config.formId == id;\n            }\n        });\n    }\n\n    getFormByHandle(handle) {\n        return this.forms.find((form) => {\n            if (form.config) {\n                return form.config.formHandle == handle;\n            }\n        });\n    }\n\n    destroyForm($form) {\n        var form = this.getForm($form);\n\n        if (!form) {\n            return;\n        }\n\n        var index = this.forms.indexOf(form);\n\n        if (index === -1) {\n            return;\n        }\n\n        // Delete any additional scripts for the form - if any\n        if (form.$registeredJs && form.$registeredJs.parentNode) {\n            form.$registeredJs.parentNode.removeChild(form.$registeredJs);\n        }\n\n        // Remove all event listeners attached to this form\n        if (!isEmpty(form.listeners)) {\n            Object.keys(form.listeners).forEach(eventKey => {\n                form.removeEventListener(eventKey);\n            });\n        }\n\n        // Destroy Bouncer events\n        if (form.formTheme && form.formTheme.validator) {\n            form.formTheme.validator.destroy();\n        }\n\n        // Delete it from the factory\n        delete this.forms[index];\n    }\n}\n\nwindow.Formie = Formie;\n","/* eslint-disable */\n\n/*!\n * formbouncerjs v1.4.6\n * A lightweight form validation script that augments native HTML5 form validation elements and attributes.\n * (c) 2020 Chris Ferdinandi\n * MIT License\n * http://github.com/cferdinandi/bouncer\n */\n\n/**\n * The plugin constructor\n * @param {String} selector The selector to use for forms to be validated\n * @param {Object} options  User settings [optional]\n */\nexport const Bouncer = function(selector, options) {\n    //\n    // Variables\n    //\n\n    var defaults = {\n\n        // Classes & IDs\n\n        fieldClass: 'error',\n        errorClass: 'error-message',\n        fieldPrefix: 'bouncer-field_',\n        errorPrefix: 'bouncer-error_',\n\n        // Patterns\n        patterns: {\n            email: /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/,\n            url: /^(?:(?:https?|HTTPS?|ftp|FTP):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/,\n            number: /^(?:[-+]?[0-9]*[.,]?[0-9]+)$/,\n            color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,\n            date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))/,\n            time: /^(?:(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]))$/,\n            month: /^(?:(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])))$/,\n        },\n\n        // Custom Validations\n        customValidations: {},\n\n        // Messages\n        messageAfterField: true,\n        messageCustom: 'data-bouncer-message',\n        messageTarget: 'data-bouncer-target',\n        // messages: {\n        //     missingValue: {\n        //         checkbox: 'This field is required.',\n        //         radio: 'Please select a value.',\n        //         select: 'Please select a value.',\n        //         'select-multiple': 'Please select at least one value.',\n        //         default: 'Please fill out this field.',\n        //     },\n        //     patternMismatch: {\n        //         email: 'Please enter a valid email address.',\n        //         url: 'Please enter a URL.',\n        //         number: 'Please enter a number',\n        //         color: 'Please match the following format: #rrggbb',\n        //         date: 'Please use the YYYY-MM-DD format',\n        //         time: 'Please use the 24-hour time format. Ex. 23:00',\n        //         month: 'Please use the YYYY-MM format',\n        //         default: 'Please match the requested format.',\n        //     },\n        //     outOfRange: {\n        //         over: 'Please select a value that is no more than {max}.',\n        //         under: 'Please select a value that is no less than {min}.',\n        //     },\n        //     wrongLength: {\n        //         over: 'Please shorten this text to no more than {maxLength} characters. You are currently using {length} characters.',\n        //         under: 'Please lengthen this text to {minLength} characters or more. You are currently using {length} characters.',\n        //     },\n        //     fallback: 'There was an error with this field.',\n        // },\n\n        // Form Submission\n        disableSubmit: false,\n        \n        // Allow blur/click/input events to be opt-out\n        validateOnBlur: true,\n\n        // Allow validation to be turned off altogether. Useful for server-side validation use.\n        validateOnSubmit: true,\n\n        // Custom Events\n        emitEvents: true,\n\n    };\n\n\n    //\n    // Methods\n    //\n\n    /**\n     * A wrapper for Array.prototype.forEach() for non-arrays\n     * @param  {Array-like} arr      The array-like object\n     * @param  {Function}   callback The callback to run\n     */\n    var forEach = function(arr, callback) {\n        Array.prototype.forEach.call(arr, callback);\n    };\n\n    /**\n     * Merge two or more objects together.\n     * @param   {Object}   objects  The objects to merge together\n     * @returns {Object}            Merged values of defaults and options\n     */\n    var extend = function() {\n        var merged = {};\n        forEach(arguments, ((obj) => {\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) return;\n                if (Object.prototype.toString.call(obj[key]) === '[object Object]') {\n                    merged[key] = extend(merged[key], obj[key]);\n                } else {\n                    merged[key] = obj[key];\n                }\n                // merged[key] = obj[key];\n            }\n        }));\n        return merged;\n    };\n\n    /**\n     * Emit a custom event\n     * @param  {String} type    The event type\n     * @param  {Object} options The settings object\n     * @param  {Node}   anchor  The anchor element\n     * @param  {Node}   toggle  The toggle element\n     */\n    var emitEvent = function(elem, type, details) {\n        if (typeof window.CustomEvent !== 'function') return;\n        var event = new CustomEvent(type, {\n            bubbles: true,\n            detail: details || {},\n        });\n        elem.dispatchEvent(event);\n    };\n\n    /**\n     * Add the `novalidate` attribute to all forms\n     * @param {Boolean} remove  If true, remove the `novalidate` attribute\n     */\n    var addNoValidate = function(selector) {\n        forEach(document.querySelectorAll(selector), ((form) => {\n            form.setAttribute('novalidate', true);\n        }));\n    };\n\n    /**\n     * Remove the `novalidate` attribute to all forms\n     */\n    var removeNoValidate = function(selector) {\n        forEach(document.querySelectorAll(selector), ((form) => {\n            form.removeAttribute('novalidate');\n        }));\n    };\n\n    /**\n     * Check if a required field is missing its value\n     * @param  {Node} field The field to check\n     * @return {Boolean}       It true, field is missing it's value\n     */\n    var missingValue = function(field) {\n\n        // If not required, bail\n        if (!field.hasAttribute('required')) return false;\n\n        // Handle checkboxes\n        if (field.type === 'checkbox') {\n            var checkboxInputs = field.form.querySelectorAll('[name=\"' + escapeCharacters(field.name) + '\"]:not([type=\"hidden\"])');\n\n            var checkedInputs = Array.prototype.filter.call(checkboxInputs, ((btn) => {\n                return btn.checked;\n            })).length;\n\n            if (checkedInputs === 0) {\n                return (field === checkboxInputs[0]);\n            }\n\n            return !field.checked;\n        }\n\n        // Get the field value length\n        var { length } = field.value;\n\n        // Handle radio buttons\n        if (field.type === 'radio') {\n            length = Array.prototype.filter.call(field.form.querySelectorAll('[name=\"' + escapeCharacters(field.name) + '\"]'), ((btn) => {\n                return btn.checked;\n            })).length;\n        }\n\n        // Check for value\n        return length < 1;\n\n    };\n\n    /**\n     * Check if field value doesn't match a patter.\n     * @param  {Node}   field    The field to check\n     * @param  {Object} settings The plugin settings\n     * @see https://www.w3.org/TR/html51/sec-forms.html#the-pattern-attribute\n     * @return {Boolean}         If true, there's a pattern mismatch\n     */\n    var patternMismatch = function(field, settings) {\n\n        // Check if there's a pattern to match\n        var pattern = field.getAttribute('pattern');\n        pattern = pattern ? new RegExp('^(?:' + pattern + ')$') : settings.patterns[field.type];\n        if (!pattern || !field.value || field.value.length < 1) return false;\n\n        // Validate the pattern\n        return field.value.match(pattern) ? false : true;\n\n    };\n\n    /**\n     * Check if field value is out-of-range\n     * @param  {Node}    field    The field to check\n     * @return {String}           Returns 'over', 'under', or false\n     */\n    var outOfRange = function(field) {\n\n        // Make sure field has value\n        if (!field.value || field.value.length < 1) return false;\n\n        // Check for range\n        var max = field.getAttribute('max');\n        var min = field.getAttribute('min');\n\n        // Check validity\n        var num = parseFloat(field.value);\n        if (max && num > max) return 'over';\n        if (min && num < min) return 'under';\n        return false;\n\n    };\n\n    /**\n     * Check if the field value is too long or too short\n     * @param  {Node}   field    The field to check\n     * @return {String}           Returns 'over', 'under', or false\n     */\n    var wrongLength = function(field) {\n\n        // Make sure field has value\n        if (!field.value || field.value.length < 1) return false;\n\n        // Check for min/max length\n        var max = field.getAttribute('maxlength');\n        var min = field.getAttribute('minlength');\n\n        // Check validity\n        var { length } = field.value;\n        if (max && length > max) return 'over';\n        if (min && length < min) return 'under';\n        return false;\n\n    };\n\n    /**\n     * Test for standard field validations\n     * @param  {Node}   field    The field to test\n     * @param  {Object} settings The plugin settings\n     * @return {Object}          The tests and their results\n     */\n    var runValidations = function(field, settings) {\n        return {\n            missingValue: missingValue(field),\n            patternMismatch: patternMismatch(field, settings),\n            outOfRange: outOfRange(field),\n            wrongLength: wrongLength(field),\n        };\n    };\n\n    /**\n     * Run any provided custom validations\n     * @param  {Node}   field       The field to test\n     * @param  {Object} errors      The existing errors\n     * @param  {Object} validations The custom validations to run\n     * @param  {Object} settings    The plugin settings\n     * @return {Object}             The tests and their results\n     */\n    var customValidations = function(field, errors, validations, settings) {\n        for (var test in validations) {\n            if (validations.hasOwnProperty(test)) {\n                errors[test] = validations[test](field, settings);\n            }\n        }\n        return errors;\n    };\n\n    /**\n     * Check if a field has any errors\n     * @param  {Object}  errors The validation test results\n     * @return {Boolean}        Returns true if there are errors\n     */\n    var hasErrors = function(errors) {\n        for (var type in errors) {\n            if (errors[type]) return true;\n        }\n        return false;\n    };\n\n    /**\n     * Check a field for errors\n     * @param  {Node} field      The field to test\n     * @param  {Object} settings The plugin settings\n     * @return {Object}          The field validity and errors\n     */\n    var getErrors = function(field, settings) {\n\n        // Get standard validation errors\n        var errors = runValidations(field,settings);\n\n        // Check for custom validations\n        errors = customValidations(field, errors, settings.customValidations, settings);\n\n        return {\n            valid: !hasErrors(errors),\n            errors,\n        };\n\n    };\n\n    /**\n     * Escape special characters for use with querySelector\n     * @author Mathias Bynens\n     * @link https://github.com/mathiasbynens/CSS.escape\n     * @param {String} id The anchor ID to escape\n     */\n    var escapeCharacters = function(id) {\n\n        var string = String(id);\n        var { length } = string;\n        var index = -1;\n        var codeUnit;\n        var result = '';\n        var firstCodeUnit = string.charCodeAt(0);\n        while (++index < length) {\n            codeUnit = string.charCodeAt(index);\n            // Note: there’s no need to special-case astral symbols, surrogate\n            // pairs, or lone surrogates.\n\n            // If the character is NULL (U+0000), then throw an\n            // `InvalidCharacterError` exception and terminate these steps.\n            if (codeUnit === 0x0000) {\n                throw new InvalidCharacterError(\n                    'Invalid character: the input contains U+0000.'\n                );\n            }\n\n            if (\n                // If the character is in the range [\\1-\\1F] (U+0001 to U+001F) or is\n                // U+007F, […]\n                (codeUnit >= 0x0001 && codeUnit <= 0x001F) || codeUnit == 0x007F ||\n                // If the character is the first character and is in the range [0-9]\n                // (U+0030 to U+0039), […]\n                (index === 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039) ||\n                // If the character is the second character and is in the range [0-9]\n                // (U+0030 to U+0039) and the first character is a `-` (U+002D), […]\n                (\n                    index === 1 &&\n                    codeUnit >= 0x0030 && codeUnit <= 0x0039 &&\n                    firstCodeUnit === 0x002D\n                )\n            ) {\n                // http://dev.w3.org/csswg/cssom/#escape-a-character-as-code-point\n                result += '\\\\' + codeUnit.toString(16) + ' ';\n                continue;\n            }\n\n            // If the character is not handled by one of the above rules and is\n            // greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or\n            // is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to\n            // U+005A), or [a-z] (U+0061 to U+007A), […]\n            if (\n                codeUnit >= 0x0080 ||\n                codeUnit === 0x002D ||\n                codeUnit === 0x005F ||\n                codeUnit >= 0x0030 && codeUnit <= 0x0039 ||\n                codeUnit >= 0x0041 && codeUnit <= 0x005A ||\n                codeUnit >= 0x0061 && codeUnit <= 0x007A\n            ) {\n                // the character itself\n                result += string.charAt(index);\n                continue;\n            }\n\n            // Otherwise, the escaped character.\n            // http://dev.w3.org/csswg/cssom/#escape-a-character\n            result += '\\\\' + string.charAt(index);\n\n        }\n\n        // Return sanitized hash\n        return result;\n\n    };\n\n    /**\n     * Get or create an ID for a field\n     * @param  {Node}    field    The field\n     * @param  {Object}  settings The plugin settings\n     * @param  {Boolean} create   If true, create an ID if there isn't one\n     * @return {String}           The field ID\n     */\n    var getFieldID = function(field, settings, create) {\n        var id = field.name ? field.name : field.id;\n        if (!id && create) {\n            id = settings.fieldPrefix + Math.floor(Math.random() * 999);\n            field.id = id;\n        }\n        if (field.type === 'checkbox') {\n            id += '_' + (field.value || field.id);\n        }\n        return id;\n    };\n\n    /**\n     * Special handling for radio buttons and checkboxes wrapped in labels.\n     * @param  {Node} field The field with the error\n     * @return {Node}       The field to show the error on\n     */\n    var getErrorField = function(field) {\n\n        // If the field is a radio button, get the last item in the radio group\n        // @todo if location is before, get first item\n        if (field.type === 'radio' && field.name) {\n            var group = field.form.querySelectorAll('[name=\"' + escapeCharacters(field.name) + '\"]');\n            field = group[group.length - 1];\n        }\n\n        // Get the associated label for radio button or checkbox\n        // if (field.type === 'radio') {\n        //     var label = field.closest('label') || field.form.querySelector('[for=\"' + field.id + '\"]');\n        //     field = label || field;\n        // }\n\n        if (field.type === 'checkbox' || field.type === 'radio') {\n            // TODO: think of a way to make this less opinionated\n            field = field.closest('.fui-field-container');\n        }\n\n        return field;\n\n    };\n\n    /**\n     * Get the location for a field's error message\n     * @param  {Node}   field    The field\n     * @param  {Node}   target   The target for error message\n     * @param  {Object} settings The plugin settings\n     * @return {Node}            The error location\n     */\n    var getErrorLocation = function(field, target, settings) {\n\n        // Check for a custom error message\n        var selector = field.getAttribute(settings.messageTarget);\n        if (selector) {\n            var location = field.form.querySelector(selector);\n            if (location) {\n                // @bugfix by @HaroldPutman\n                // https://github.com/cferdinandi/bouncer/pull/28\n                return location.firstChild || location.appendChild(document.createTextNode(''));\n            }\n        }\n\n        // If the message should come after the field\n        if (settings.messageAfterField) {\n\n            // If there's no next sibling, create one\n            if (!target.nextSibling) {\n                target.parentNode.appendChild(document.createTextNode(''));\n            }\n\n            return target.nextSibling;\n\n        }\n\n        // If it should come before\n        return target;\n\n    };\n\n    /**\n     * Create a validation error message node\n     * @param  {Node} field      The field\n     * @param  {Object} settings The plugin settings\n     * @return {Node}            The error message node\n     */\n    var createError = function(field, settings) {\n\n        // Create the error message\n        var error = document.createElement('div');\n        error.className = settings.errorClass;\n        error.id = settings.errorPrefix + getFieldID(field, settings, true);\n\n        // If the field is a radio button or checkbox, grab the last field label\n        var fieldTarget = getErrorField(field);\n\n        // Inject the error message into the DOM\n        var location = getErrorLocation(field, fieldTarget, settings);\n        location.parentNode.insertBefore(error, location);\n\n        return error;\n\n    };\n\n    /**\n     * Get the error message test\n     * @param  {Node}            field    The field to get an error message for\n     * @param  {Object}          errors   The errors on the field\n     * @param  {Object}          settings The plugin settings\n     * @return {String|Function}          The error message\n     */\n    var getErrorMessage = function(field, errors, settings) {\n\n        // Variables\n        var { messages } = settings;\n\n        // Missing value error\n        if (errors.missingValue) {\n            return messages.missingValue[field.type] || messages.missingValue.default;\n        }\n\n        // Numbers that are out of range\n        if (errors.outOfRange) {\n            return messages.outOfRange[errors.outOfRange].replace('{max}', field.getAttribute('max')).replace('{min}', field.getAttribute('min')).replace('{length}', field.value.length);\n        }\n\n        // Values that are too long or short\n        if (errors.wrongLength) {\n            return messages.wrongLength[errors.wrongLength].replace('{maxLength}', field.getAttribute('maxlength')).replace('{minLength}', field.getAttribute('minlength')).replace('{length}', field.value.length);\n        }\n\n        // Pattern mismatch error\n        if (errors.patternMismatch) {\n            var custom = field.getAttribute(settings.messageCustom);\n            if (custom) return custom;\n            return messages.patternMismatch[field.type] || messages.patternMismatch.default;\n        }\n\n        // Custom validations\n        for (var test in settings.customValidations) {\n            if (settings.customValidations.hasOwnProperty(test)) {\n                if (errors[test] && messages[test]) return messages[test];\n            }\n        }\n\n        // Custom message, passed directly in\n        if (errors.customMessage) {\n            return errors.customMessage;\n        }\n\n        // Fallback error message\n        return messages.fallback;\n\n    };\n\n    /**\n     * Add error attributes to a field\n     * @param  {Node}   field    The field with the error message\n     * @param  {Node}   error    The error message\n     * @param  {Object} settings The plugin settings\n     */\n    var addErrorAttributes = function(field, error, settings) {\n        field.classList.add(settings.fieldClass);\n        field.setAttribute('aria-describedby', error.id);\n        field.setAttribute('aria-invalid', true);\n\n        // TODO: think of a way to make this less opinionated\n        var $fieldNode = field.closest('.fui-field');\n\n        if ($fieldNode) {\n            $fieldNode.classList.add(settings.fieldClass);\n        }\n    };\n\n    /**\n     * Show error attributes on a field or radio/checkbox group\n     * @param  {Node}   field    The field with the error message\n     * @param  {Node}   error    The error message\n     * @param  {Object} settings The plugin settings\n     */\n    var showErrorAttributes = function(field, error, settings) {\n\n        // If field is a radio button, add attributes to every button in the group\n        if (field.type === 'radio' && field.name) {\n            Array.prototype.forEach.call(document.querySelectorAll('[name=\"' + field.name + '\"]'), ((button) => {\n                addErrorAttributes(button, error, settings);\n            }));\n        }\n\n        // Otherwise, add an error class and aria attribute to the field\n        addErrorAttributes(field, error, settings);\n\n    };\n\n    /**\n     * Show an error message in the DOM\n     * @param  {Node} field      The field to show an error message for\n     * @param  {Object}          errors   The errors on the field\n     * @param  {Object}          settings The plugin settings\n     */\n    var showError = function(field, errors, settings) {\n\n        // Get/create an error message\n        var error = field.form.querySelector('#' + escapeCharacters(settings.errorPrefix + getFieldID(field, settings))) || createError(field, settings);\n        var msg = getErrorMessage(field, errors, settings);\n        error.textContent = typeof msg === 'function' ? msg(field, settings) : msg;\n\n        // Add error attributes\n        showErrorAttributes(field, error, settings);\n\n        // Emit custom event\n        if (settings.emitEvents) {\n            emitEvent(field, 'bouncerShowError', {\n                errors,\n            });\n        }\n\n    };\n\n    /**\n     * Remove error attributes from a field\n     * @param  {Node}   field    The field with the error message\n     * @param  {Node}   error    The error message\n     * @param  {Object} settings The plugin settings\n     */\n    var removeAttributes = function(field, settings) {\n        field.classList.remove(settings.fieldClass);\n        field.removeAttribute('aria-describedby');\n        field.removeAttribute('aria-invalid');\n\n        // TODO: think of a way to make this less opinionated\n        var $fieldNode = field.closest('.fui-field');\n\n        if ($fieldNode) {\n            $fieldNode.classList.remove(settings.fieldClass);\n        }\n    };\n\n    /**\n     * Remove error attributes from the field or radio group\n     * @param  {Node}   field    The field with the error message\n     * @param  {Node}   error    The error message\n     * @param  {Object} settings The plugin settings\n     */\n    var removeErrorAttributes = function(field, settings) {\n\n        // If field is a radio button, remove attributes from every button in the group\n        if (field.type === 'radio' && field.name) {\n            Array.prototype.forEach.call(document.querySelectorAll('[name=\"' + field.name + '\"]'), ((button) => {\n                removeAttributes(button, settings);\n            }));\n            return;\n        }\n\n        // Otherwise, add an error class and aria attribute to the field\n        removeAttributes(field, settings);\n\n    };\n\n    /**\n     * Remove an error message from the DOM\n     * @param  {Node} field      The field with the error message\n     * @param  {Object} settings The plugin settings\n     */\n    var removeError = function(field, settings) {\n\n        // Get the error message for this field\n        var error = field.form.querySelector('#' + escapeCharacters(settings.errorPrefix + getFieldID(field, settings)));\n        if (!error) return;\n\n        // Remove the error\n        error.parentNode.removeChild(error);\n\n        // Remove error and a11y from the field\n        removeErrorAttributes(field, settings);\n\n        // Emit custom event\n        if (settings.emitEvents) {\n            emitEvent(field, 'bouncerRemoveError');\n        }\n\n    };\n\n    /**\n     * Remove errors from all fields\n     * @param  {String} selector The selector for the form\n     * @param  {Object} settings The plugin settings\n     */\n    var removeAllErrors = function(selector, settings) {\n        forEach(document.querySelectorAll(selector), ((form) => {\n            forEach(form.querySelectorAll('input, select, textarea'), ((field) => {\n                removeError(field, settings);\n            }));\n        }));\n    };\n\n    //\n    // Variables\n    //\n\n    var publicAPIs = {};\n    var settings;\n\n\n    //\n    // Methods\n    //\n    \n    /**\n     * Show an error message in the DOM\n     * @param  {Node} field      The field to show an error message for\n     * @param  {Object}          errors   The errors on the field\n     * @param  {Object}          options Additional plugin settings\n     */\n    publicAPIs.showError = function(field, errors, options) {\n        var _settings = extend(settings, options || {});\n\n        return showError(field, errors, _settings);\n    };\n\n    /**\n     * Remove an error message from the DOM\n     * @param  {Node} field      The field with the error message\n     * @param  {Object} settings The plugin settings\n     */\n    publicAPIs.removeError = function(field, options) {\n        var _settings = extend(settings, options || {});\n\n        return removeError(field, _settings);\n    };\n\n    /**\n     * Validate a field\n     * @param  {Node} field     The field to validate\n     * @param  {Object} options Validation options\n     * @return {Object}         The validity state and errors\n     */\n    publicAPIs.validate = function(field, options) {\n\n        // Don't validate submits, buttons, file and reset inputs, and disabled and readonly fields\n        if (field.disabled || field.readOnly || field.type === 'reset' || field.type === 'submit' || field.type === 'button') return;\n\n        // Local settings\n        var _settings = extend(settings, options || {});\n\n        // Check for errors\n        var isValid = getErrors(field, _settings);\n\n        // If valid, remove any error messages\n        if (isValid.valid) {\n            removeError(field, _settings);\n            return;\n        }\n\n        // Otherwise, show an error message\n        showError(field, isValid.errors, _settings);\n\n        return isValid;\n\n    };\n\n    /**\n     * Validate all fields in a form or section\n     * @param  {Node} target The form or section to validate fields in\n     * @return {Array}       An array of fields with errors\n     */\n    publicAPIs.validateAll = function(target) {\n        return Array.prototype.filter.call(target.querySelectorAll('input, select, textarea'), ((field) => {\n            var validate = publicAPIs.validate(field);\n            return validate && !validate.valid;\n        }));\n    };\n\n    /**\n     * Run a validation on field blur\n     */\n    var blurHandler = function(event) {\n\n        // Only run if the field is in a form to be validated\n        if (!event.target.form || !event.target.form.matches(selector)) return;\n\n        // Special-case for file field, blurs as soon as the selector kicks in\n        if (event.target.type === 'file') return;\n\n        // Validate the field\n        publicAPIs.validate(event.target);\n\n    };\n\n    // Leave this as opt-in for the moment, for better file-support\n    var changeHandler = function(event) {\n\n        // Only run if the field is in a form to be validated\n        if (!event.target.form || !event.target.form.matches(selector)) return;\n\n        // Just deal with file input fields\n        if (event.target.type !== 'file') return;\n\n        // Validate the field\n        publicAPIs.validate(event.target);\n\n    };\n\n    /**\n     * Run a validation on a fields with errors when the value changes\n     */\n    var inputHandler = function(event) {\n\n        // Only run if the field is in a form to be validated\n        if (!event.target.form || !event.target.form.matches(selector)) return;\n\n        // Only run on fields with errors\n        if (!event.target.classList.contains(settings.fieldClass)) return;\n\n        // Validate the field\n        publicAPIs.validate(event.target);\n\n    };\n\n    /**\n     * Validate an entire form when it's submitted\n     */\n    var submitHandler = function(event) {\n\n        // Only run on matching elements\n        if (!event.target.matches(selector)) return;\n\n        // Prevent form submission\n        event.preventDefault();\n\n        // Validate each field\n        var errors = publicAPIs.validateAll(event.target);\n\n        // If there are errors, focus on the first one\n        if (errors.length > 0) {\n            errors[0].focus();\n            emitEvent(event.target, 'bouncerFormInvalid', { errors });\n            return;\n        }\n\n        // Otherwise, submit if not disabled\n        if (!settings.disableSubmit) {\n            event.target.submit();\n        }\n\n        // Emit custom event\n        if (settings.emitEvents) {\n            emitEvent(event.target, 'bouncerFormValid');\n        }\n\n    };\n\n    /**\n     * Destroy the current plugin instantiation\n     */\n    publicAPIs.destroy = function() {\n\n        // Remove event listeners\n        if (settings.validateOnBlur) {\n            document.removeEventListener('blur', blurHandler, true);\n            document.removeEventListener('input', inputHandler, false);\n            document.removeEventListener('change', changeHandler, false);\n            document.removeEventListener('click', inputHandler, false);\n        }\n        \n        if (settings.validateOnSubmit) {\n            document.removeEventListener('submit', submitHandler, false);\n        }\n\n        // Remove all errors\n        removeAllErrors(selector, settings);\n\n        // Remove novalidate attribute\n        removeNoValidate(selector);\n\n        // Emit custom event\n        if (settings.emitEvents) {\n            emitEvent(document, 'bouncerDestroyed', {\n                settings,\n            });\n        }\n\n        // Reset settings\n        settings = null;\n\n    };\n\n    /**\n     * Instantiate a new instance of the plugin\n     */\n    var init = function() {\n\n        // Create settings\n        settings = extend(defaults, options || {});\n\n        // Add novalidate attribute\n        addNoValidate(selector);\n\n        // Event Listeners\n        if (settings.validateOnBlur) {\n            document.addEventListener('blur', blurHandler, true);\n            document.addEventListener('input', inputHandler, false);\n            document.addEventListener('change', changeHandler, false);\n            document.addEventListener('click', inputHandler, false);\n        }\n        \n        if (settings.validateOnSubmit) {\n            document.addEventListener('submit', submitHandler, false);\n        }\n\n        // Emit custom event\n        if (settings.emitEvents) {\n            emitEvent(document, 'bouncerInitialized', {\n                settings,\n            });\n        }\n\n    };\n\n    //\n    // Inits & Event Listeners\n    //\n\n    init();\n    \n    return publicAPIs;\n};\n","global.t = function(string, replacements = {}) {\n    if (window.FormieTranslations) {\n        string = window.FormieTranslations[string] || string;\n    }\n\n    return string.replace(/{([a-zA-Z0-9]+)}/g, (match, p1) => {\n        if (replacements[p1]) {\n            return replacements[p1];\n        }\n\n        return match;\n    });\n};\n\n//\n// Polyfills for IE11\n//\n\n// CustomEvent()\n(function() {\n    if ( typeof window.CustomEvent === 'function' ) return false;\n\n    function CustomEvent( event, params ) {\n        params = params || { bubbles: false, cancelable: false, detail: null };\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n        return evt;\n    }\n\n    window.CustomEvent = CustomEvent;\n})();\n\n// FormData\nimport 'formdata-polyfill';\n\n// closest\nif (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n\nif (!Element.prototype.closest) {\n    Element.prototype.closest = function(s) {\n        var el = this;\n\n        do {\n            if (el.matches(s)) return el;\n            el = el.parentElement || el.parentNode;\n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}\n","export const isEmpty = function(obj) {\n    return obj && Object.keys(obj).length === 0 && obj.constructor === Object;\n};\n\nexport const toBoolean = function(val) {\n    return !/^(?:f(?:alse)?|no?|0+)$/i.test(val) && !!val;\n};\n\nexport const eventKey = function(eventName) {\n    return eventName + '.' + Math.random();\n};\n\n",";(function(){var h;function l(a){var c=0;return function(){return c<a.length?{done:!1,value:a[c++]}:{done:!0}}}var m=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,c,b){if(a==Array.prototype||a==Object.prototype)return a;a[c]=b.value;return a};\nfunction n(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var c=0;c<a.length;++c){var b=a[c];if(b&&b.Math==Math)return b}throw Error(\"Cannot find global object\");}var p=n(this);function r(a,c){if(c){for(var b=p,d=a.split(\".\"),e=0;e<d.length-1;e++){var f=d[e];f in b||(b[f]={});b=b[f]}d=d[d.length-1];e=b[d];f=c(e);f!=e&&null!=f&&m(b,d,{configurable:!0,writable:!0,value:f})}}\nr(\"Symbol\",function(a){function c(e){if(this instanceof c)throw new TypeError(\"Symbol is not a constructor\");return new b(\"jscomp_symbol_\"+(e||\"\")+\"_\"+d++,e)}function b(e,f){this.o=e;m(this,\"description\",{configurable:!0,writable:!0,value:f})}if(a)return a;b.prototype.toString=function(){return this.o};var d=0;return c});\nr(\"Symbol.iterator\",function(a){if(a)return a;a=Symbol(\"Symbol.iterator\");for(var c=\"Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array\".split(\" \"),b=0;b<c.length;b++){var d=p[c[b]];\"function\"===typeof d&&\"function\"!=typeof d.prototype[a]&&m(d.prototype,a,{configurable:!0,writable:!0,value:function(){return u(l(this))}})}return a});function u(a){a={next:a};a[Symbol.iterator]=function(){return this};return a}\nfunction v(a){var c=\"undefined\"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return c?c.call(a):{next:l(a)}}var w;if(\"function\"==typeof Object.setPrototypeOf)w=Object.setPrototypeOf;else{var y;a:{var z={u:!0},A={};try{A.__proto__=z;y=A.u;break a}catch(a){}y=!1}w=y?function(a,c){a.__proto__=c;if(a.__proto__!==c)throw new TypeError(a+\" is not extensible\");return a}:null}var B=w;function C(){this.h=!1;this.f=null;this.m=void 0;this.b=1;this.l=this.v=0;this.g=null}\nfunction D(a){if(a.h)throw new TypeError(\"Generator is already running\");a.h=!0}C.prototype.i=function(a){this.m=a};C.prototype.j=function(a){this.g={w:a,A:!0};this.b=this.v||this.l};C.prototype[\"return\"]=function(a){this.g={\"return\":a};this.b=this.l};function E(a,c){a.b=3;return{value:c}}function F(a){this.a=new C;this.B=a}F.prototype.i=function(a){D(this.a);if(this.a.f)return G(this,this.a.f.next,a,this.a.i);this.a.i(a);return H(this)};\nfunction I(a,c){D(a.a);var b=a.a.f;if(b)return G(a,\"return\"in b?b[\"return\"]:function(d){return{value:d,done:!0}},c,a.a[\"return\"]);a.a[\"return\"](c);return H(a)}F.prototype.j=function(a){D(this.a);if(this.a.f)return G(this,this.a.f[\"throw\"],a,this.a.i);this.a.j(a);return H(this)};\nfunction G(a,c,b,d){try{var e=c.call(a.a.f,b);if(!(e instanceof Object))throw new TypeError(\"Iterator result \"+e+\" is not an object\");if(!e.done)return a.a.h=!1,e;var f=e.value}catch(g){return a.a.f=null,a.a.j(g),H(a)}a.a.f=null;d.call(a.a,f);return H(a)}function H(a){for(;a.a.b;)try{var c=a.B(a.a);if(c)return a.a.h=!1,{value:c.value,done:!1}}catch(b){a.a.m=void 0,a.a.j(b)}a.a.h=!1;if(a.a.g){c=a.a.g;a.a.g=null;if(c.A)throw c.w;return{value:c[\"return\"],done:!0}}return{value:void 0,done:!0}}\nfunction J(a){this.next=function(c){return a.i(c)};this[\"throw\"]=function(c){return a.j(c)};this[\"return\"]=function(c){return I(a,c)};this[Symbol.iterator]=function(){return this}}function K(a,c){var b=new J(new F(c));B&&B(b,a.prototype);return b}\nif(\"undefined\"!==typeof Blob&&(\"undefined\"===typeof FormData||!FormData.prototype.keys)){var L=function(a,c){for(var b=0;b<a.length;b++)c(a[b])},M=function(a,c,b){return c instanceof Blob?[String(a),c,void 0!==b?b+\"\":\"string\"===typeof c.name?c.name:\"blob\"]:[String(a),String(c)]},N=function(a,c){if(a.length<c)throw new TypeError(c+\" argument required, but only \"+a.length+\" present.\");},O=function(a){var c=v(a);a=c.next().value;var b=c.next().value;c=c.next().value;b instanceof Blob&&(b=new File([b],\nc,{type:b.type,lastModified:b.lastModified}));return[a,b]},P=\"object\"===typeof globalThis?globalThis:\"object\"===typeof window?window:\"object\"===typeof self?self:this,Q=P.FormData,R=P.XMLHttpRequest&&P.XMLHttpRequest.prototype.send,S=P.Request&&P.fetch,T=P.navigator&&P.navigator.sendBeacon,U=P.Element&&P.Element.prototype,V=P.Symbol&&Symbol.toStringTag;V&&(Blob.prototype[V]||(Blob.prototype[V]=\"Blob\"),\"File\"in P&&!File.prototype[V]&&(File.prototype[V]=\"File\"));try{new File([],\"\")}catch(a){P.File=function(c,\nb,d){c=new Blob(c,d);d=d&&void 0!==d.lastModified?new Date(d.lastModified):new Date;Object.defineProperties(c,{name:{value:b},lastModifiedDate:{value:d},lastModified:{value:+d},toString:{value:function(){return\"[object File]\"}}});V&&Object.defineProperty(c,V,{value:\"File\"});return c}}var W=function(a){this.c=[];var c=this;a&&L(a.elements,function(b){if(b.name&&!b.disabled&&\"submit\"!==b.type&&\"button\"!==b.type&&!b.matches(\"form fieldset[disabled] *\"))if(\"file\"===b.type){var d=b.files&&b.files.length?\nb.files:[new File([],\"\",{type:\"application/octet-stream\"})];L(d,function(e){c.append(b.name,e)})}else\"select-multiple\"===b.type||\"select-one\"===b.type?L(b.options,function(e){!e.disabled&&e.selected&&c.append(b.name,e.value)}):\"checkbox\"===b.type||\"radio\"===b.type?b.checked&&c.append(b.name,b.value):(d=\"textarea\"===b.type?b.value.replace(/\\r\\n/g,\"\\n\").replace(/\\n/g,\"\\r\\n\"):b.value,c.append(b.name,d))})};h=W.prototype;h.append=function(a,c,b){N(arguments,2);this.c.push(M(a,c,b))};h[\"delete\"]=function(a){N(arguments,\n1);var c=[];a=String(a);L(this.c,function(b){b[0]!==a&&c.push(b)});this.c=c};h.entries=function c(){var b,d=this;return K(c,function(e){1==e.b&&(b=0);if(3!=e.b)return b<d.c.length?e=E(e,O(d.c[b])):(e.b=0,e=void 0),e;b++;e.b=2})};h.forEach=function(c,b){N(arguments,1);for(var d=v(this),e=d.next();!e.done;e=d.next()){var f=v(e.value);e=f.next().value;f=f.next().value;c.call(b,f,e,this)}};h.get=function(c){N(arguments,1);var b=this.c;c=String(c);for(var d=0;d<b.length;d++)if(b[d][0]===c)return O(b[d])[1];\nreturn null};h.getAll=function(c){N(arguments,1);var b=[];c=String(c);L(this.c,function(d){d[0]===c&&b.push(O(d)[1])});return b};h.has=function(c){N(arguments,1);c=String(c);for(var b=0;b<this.c.length;b++)if(this.c[b][0]===c)return!0;return!1};h.keys=function b(){var d=this,e,f,g,k,q;return K(b,function(t){1==t.b&&(e=v(d),f=e.next());if(3!=t.b){if(f.done){t.b=0;return}g=f.value;k=v(g);q=k.next().value;return E(t,q)}f=e.next();t.b=2})};h.set=function(b,d,e){N(arguments,2);b=String(b);var f=[],g=M(b,\nd,e),k=!0;L(this.c,function(q){q[0]===b?k&&(k=!f.push(g)):f.push(q)});k&&f.push(g);this.c=f};h.values=function d(){var e=this,f,g,k,q,t;return K(d,function(x){1==x.b&&(f=v(e),g=f.next());if(3!=x.b){if(g.done){x.b=0;return}k=g.value;q=v(k);q.next();t=q.next().value;return E(x,t)}g=f.next();x.b=2})};W.prototype._asNative=function(){for(var d=new Q,e=v(this),f=e.next();!f.done;f=e.next()){var g=v(f.value);f=g.next().value;g=g.next().value;d.append(f,g)}return d};W.prototype._blob=function(){for(var d=\n\"----formdata-polyfill-\"+Math.random(),e=[],f=v(this),g=f.next();!g.done;g=f.next()){var k=v(g.value);g=k.next().value;k=k.next().value;e.push(\"--\"+d+\"\\r\\n\");k instanceof Blob?e.push('Content-Disposition: form-data; name=\"'+g+'\"; filename=\"'+k.name+'\"\\r\\nContent-Type: '+((k.type||\"application/octet-stream\")+\"\\r\\n\\r\\n\"),k,\"\\r\\n\"):e.push('Content-Disposition: form-data; name=\"'+g+'\"\\r\\n\\r\\n'+k+\"\\r\\n\")}e.push(\"--\"+d+\"--\");return new Blob(e,{type:\"multipart/form-data; boundary=\"+d})};W.prototype[Symbol.iterator]=\nfunction(){return this.entries()};W.prototype.toString=function(){return\"[object FormData]\"};U&&!U.matches&&(U.matches=U.matchesSelector||U.mozMatchesSelector||U.msMatchesSelector||U.oMatchesSelector||U.webkitMatchesSelector||function(d){d=(this.document||this.ownerDocument).querySelectorAll(d);for(var e=d.length;0<=--e&&d.item(e)!==this;);return-1<e});V&&(W.prototype[V]=\"FormData\");if(R){var X=P.XMLHttpRequest.prototype.setRequestHeader;P.XMLHttpRequest.prototype.setRequestHeader=function(d,e){X.call(this,\nd,e);\"content-type\"===d.toLowerCase()&&(this.s=!0)};P.XMLHttpRequest.prototype.send=function(d){d instanceof W?(d=d._blob(),this.s||this.setRequestHeader(\"Content-Type\",d.type),R.call(this,d)):R.call(this,d)}}S&&(P.fetch=function(d,e){e&&e.body&&e.body instanceof W&&(e.body=e.body._blob());return S.call(this,d,e)});T&&(P.navigator.sendBeacon=function(d,e){e instanceof W&&(e=e._asNative());return T.call(this,d,e)});P.FormData=W};\n})();\n","import { Formie } from '../../../cms/vendor/verbb/formie/src/web/assets/frontend/src/js/formie-lib';\r\n\r\nclass FormieForm {\r\n    static selector = '.section-formie_form--block';\r\n\r\n    constructor() {\r\n        this.instances = [];\r\n        this.forms = [];\r\n    }\r\n\r\n    init() {\r\n        let elements = $(FormieForm.selector);\r\n        if (elements.length) {\r\n            elements.each((index, element) => {\r\n                this.instances.push(element);\r\n\r\n                if ($('form.fui-form', element).length) {\r\n                    let formElement = $('form.fui-form', element)[0];\r\n                    let formInstance = new Formie();\r\n                    formInstance.initForm(formElement);\r\n\r\n                    this.forms.push({\r\n                        element: formElement,\r\n                        instance: formInstance\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        if (this.forms.length) {\r\n            for (let i = 0; i < this.forms.length; i++) {\r\n                let form = this.forms[i];\r\n                form.instance.destroyForm(form.element);\r\n            }\r\n\r\n            this.forms = [];\r\n        }\r\n\r\n        if (this.instances.length) {\r\n            this.instances = [];\r\n        }\r\n    }\r\n}\r\n\r\nexport default FormieForm;"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAHA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAEA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAEA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAEA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7JA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AA9BA;AAhBA;AACA;AAkDA;AACA;AACA;AACA;AADA;AAFA;AAQA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvmBA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnMA;AAqMA;;;;;;;;;;;;AC1MA;AAAA;AAAA;AACA;AACA;;;;;;;;AAQA;;;;;AAKA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAlEA;AAwEA;AACA;AACA;AACA;;;;;;AAKA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;;;;;;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;AAMA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;;;;;;;;AAMA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AAQA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AAEA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;AAOA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;;;;;;;;;AAOA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAEA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAEA;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;;;;;;;;;;;;ACt6BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnBA;AAAA;AAAA;;;;;A","sourceRoot":""}