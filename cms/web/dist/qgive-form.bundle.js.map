{"version":3,"file":"qgive-form.bundle.js","sources":["webpack:///./src/js/block-modules/QGiveForm.js","webpack:///./src/js/utils/ScriptLoader.js"],"sourcesContent":["import ScriptLoader from '../utils/ScriptLoader';\r\n\r\nclass QGiveForm {\r\n    static selector = '.section-qgive_form--block';\r\n\r\n    constructor() {\r\n        this.instances = [];\r\n    }\r\n\r\n    async init() {\r\n        let elements = $(QGiveForm.selector);\r\n        if (elements.length) {\r\n            elements.each((index, element) => {\r\n                this.instances.push(element);\r\n            });\r\n            let loader = new ScriptLoader({\r\n                src: 'secure.qgiv.com/resources/core/js/embed.js',\r\n                global: 'QGIV',\r\n                protocol: 'https:'\r\n            });\r\n\r\n            let qgive = await loader.load();\r\n            if (typeof qgive !== 'undefined') {\r\n                qgive.Embed.init();\r\n            }\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        if (this.instances.length) {\r\n            this.instances = [];\r\n        }\r\n    }\r\n}\r\n\r\nexport default QGiveForm;","// Utility to load JS files at runtime by creating <script> embeds\r\n// Inspired by this blog post: https://timber.io/snippets/asynchronously-load-a-script-in-the-browser-with-javascript/\r\n\r\nexport default class ScriptLoader {\r\n    constructor(options) {\r\n        const { src, global, protocol = document.location.protocol } = options;\r\n        this.src = src;\r\n        this.global = global;\r\n        this.protocol = protocol;\r\n        this.isLoaded = false;\r\n    }\r\n\r\n    loadScript() {\r\n        return new Promise((resolve, reject) => {\r\n            // Create script element and set attributes\r\n            const script = document.createElement('script');\r\n            script.type = 'text/javascript';\r\n            script.async = true;\r\n            script.src = `${this.protocol}//${this.src}`;\r\n\r\n            // Append the script to the DOM\r\n            const el = document.getElementsByTagName('script')[0];\r\n            el.parentNode.insertBefore(script, el);\r\n\r\n            // Resolve the promise once the script is loaded\r\n            script.addEventListener('load', () => {\r\n                this.isLoaded = true;\r\n                resolve(script);\r\n            })\r\n\r\n            // Catch any errors while loading the script\r\n            script.addEventListener('error', () => {\r\n                reject(new Error(`${this.src} failed to load.`));\r\n            })\r\n        });\r\n    }\r\n\r\n    load() {\r\n        return new Promise(async (resolve, reject) => {\r\n            if (!this.isLoaded) {\r\n                try {\r\n                    if (typeof window[this.global] !== 'undefined') {\r\n                        this.isLoaded = true;\r\n                        resolve(window[this.global]);\r\n                    } else {\r\n                        await this.loadScript();\r\n                        resolve(window[this.global]);\r\n                    }\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            } else {\r\n                resolve(window[this.global]);\r\n            }\r\n        });\r\n    }\r\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAYA;AAMA;AAIA;AAMA;;;;A","sourceRoot":""}