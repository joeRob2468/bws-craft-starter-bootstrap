{"version":3,"file":"contact-form.bundle.js","sources":["webpack:///./src/js/block-modules/ContactForm.js","webpack:///./src/js/vue/ContactFormApp.js"],"sourcesContent":["import 'regenerator-runtime/runtime';\r\nimport { createApp } from 'vue';\r\nimport ContactFormApp from '../vue/ContactFormApp.js';\r\n\r\nclass ContactForm {\r\n    static selector = '.section-contact_form--block';\r\n\r\n    constructor() {\r\n        this.instances = [];\r\n    }\r\n\r\n    init() {\r\n        let elements = $(ContactForm.selector);\r\n        if (elements.length) {\r\n            elements.each((index, element) => {\r\n                let instance = createApp(ContactFormApp).mount(element);\r\n                this.instances.push(instance);\r\n            });\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        if (this.instances.length) {\r\n            for (let i = 0; i < this.instances.length; i++) {\r\n                let instance = this.instances[i];\r\n                instance.destroy();\r\n            }\r\n\r\n            this.instances = [];\r\n        }\r\n    }\r\n}\r\n\r\nexport default ContactForm;","import { Field } from 'vee-validate';\r\nimport { Form as ValidationForm } from 'vee-validate';\r\nimport { object, string } from 'yup';\r\n\r\nvar ContactFormApp = {\r\n    delimiters: ['${', '}'],\r\n    components: {\r\n        Field,\r\n        ValidationForm\r\n    },\r\n    data() {\r\n        const schema = object().shape({\r\n            email: string().required().email(),\r\n            name: string().required(),\r\n            phone: string().matches(/^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/, 'Phone number not valid'),\r\n            body: string().required()\r\n        });\r\n\r\n        return {\r\n            initialized: false,\r\n            ajaxError: false,\r\n            submitting: false,\r\n            submitted: false,\r\n            buttonLabel: 'SEND MESSAGE',\r\n            schema: schema\r\n        }\r\n    },\r\n    methods: {\r\n        async onSubmit(values) {\r\n            this.submitting = true;\r\n            this.submitted = false;\r\n            this.ajaxError = false;\r\n            this.buttonLabel = 'SENDING...';\r\n\r\n            try {\r\n                let response = await $.ajax({\r\n                    method: 'post',\r\n                    url: '/',\r\n                    dataType: 'json',\r\n                    headers: {\r\n                        'X-CSRF-Token': csrfTokenValue\r\n                    },\r\n                    data: {\r\n                        'fromName': values.name,\r\n                        'fromEmail': values.email,\r\n                        'message[Phone]': values.phone,\r\n                        'message[body]': values.body,\r\n                        'action': 'contact-form/send'\r\n                    }\r\n                }).promise();\r\n\r\n                this.submitting = false;\r\n                this.submitted = true;\r\n                this.buttonLabel = 'MESSAGE SENT!';\r\n\r\n                if (typeof (ga) !== 'undefined') {\r\n                    ga('send', 'event', 'Forms', 'Contact Submission', 'Contact form submitted');\r\n                }\r\n            } catch (error) {\r\n                this.buttonLabel = 'SEND MESSAGE';\r\n                this.submitting = false;\r\n                this.ajaxError = true;\r\n                console.log(error);\r\n            }\r\n        }\r\n    },\r\n    computed: {\r\n    },\r\n    watch: {\r\n    },\r\n    mounted() {\r\n        this.initialized = true;\r\n    }\r\n};\r\n\r\nexport default ContactFormApp;"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}